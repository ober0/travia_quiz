// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid           String   @id @default(uuid())
  avatar         String?
  username       String
  firstName      String   @map("first_name")
  lastName       String   @map("last_name")
  email          String   @unique
  hashedPassword String
  twoFactor      Boolean  @default(true)
  isForbidden    Boolean  @default(false) @map("is_forbidden")
  isActive       Boolean  @default(true) @map("is_active")
  roleUuid       String?  @map("role_uuid")
  role           Role?    @relation(fields: [roleUuid], references: [uuid], onDelete: SetNull, onUpdate: NoAction)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
}

model Permission {
  uuid            String           @id @default(uuid())
  name            String           @unique
  description     String
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]
}

model Role {
  uuid            String           @id @default(uuid())
  name            String           @unique
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]
  user            User[]
}

model RolePermission {
  roleUuid       String     @map("role_uuid")
  permissionUuid String     @map("permission_uuid")
  permission     Permission @relation(fields: [permissionUuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction)
  role           Role       @relation(fields: [roleUuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction)
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @default(now()) @updatedAt @map("updated_at")

  @@id([roleUuid, permissionUuid])
}

model QuizCategory {
  uuid              String             @id @default(uuid())
  category_id       Int                @unique
  category_name     String
  QuizQuestionCount QuizQuestionCount?
  Question          Question[]
}

model QuizQuestionCount {
  uuid          String @id @default(uuid())
  category_uuid String @unique @map("category_uuid")

  category QuizCategory @relation(fields: [category_uuid], references: [uuid], onDelete: Cascade)

  count Int
}

model Question {
  uuid                String @id @default(uuid())
  category_uuid       String
  correct_answer_uuid String

  category       QuizCategory @relation(fields: [category_uuid], references: [uuid], onDelete: Cascade)
  correct_answer Answer       @relation(fields: [correct_answer_uuid], references: [uuid], onDelete: Cascade)

  difficulty     String
  type           String
  QuestionAnswer QuestionAnswer[]
}

model Answer {
  uuid           String           @id @default(uuid())
  text           String
  Question       Question[]
  QuestionAnswer QuestionAnswer[]
}

model QuestionAnswer {
  question_uuid String
  answer_uuid   String

  question Question @relation(fields: [question_uuid], references: [uuid], onDelete: Cascade)
  answer   Answer   @relation(fields: [answer_uuid], references: [uuid], onDelete: Cascade)

  @@id([question_uuid, answer_uuid])
}
